<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.woniuxy.dao.RefundinfoMapper">
  <resultMap id="BaseResultMap" type="com.woniuxy.domain.Refundinfo">
    <id column="refundinfoid" jdbcType="INTEGER" property="refundinfoid" />
    <result column="refundinfoprice" jdbcType="DECIMAL" property="refundinfoprice" />
    <result column="refundinfocount" jdbcType="INTEGER" property="refundinfocount" />
    <result column="refundinmoney" jdbcType="DECIMAL" property="refundinmoney" />
    <result column="pid" jdbcType="INTEGER" property="pid" />
    <result column="clientid" jdbcType="INTEGER" property="clientid" />
    <result column="userid" jdbcType="INTEGER" property="userid" />
    <result column="refundid" jdbcType="INTEGER" property="refundid" />
    <result column="bookid" jdbcType="INTEGER" property="bookid" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    refundinfoid, refundinfoprice, refundinfocount, refundinmoney, pid, clientid, userid, 
    refundid, bookid
  </sql>
  <select id="selectByExample" parameterType="com.woniuxy.domain.RefundinfoExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from refundinfo
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from refundinfo
    where refundinfoid = #{refundinfoid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from refundinfo
    where refundinfoid = #{refundinfoid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.woniuxy.domain.RefundinfoExample">
    delete from refundinfo
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.woniuxy.domain.Refundinfo">
    insert into refundinfo (refundinfoid, refundinfoprice, refundinfocount, 
      refundinmoney, pid, clientid, 
      userid, refundid, bookid
      )
    values (#{refundinfoid,jdbcType=INTEGER}, #{refundinfoprice,jdbcType=DECIMAL}, #{refundinfocount,jdbcType=INTEGER}, 
      #{refundinmoney,jdbcType=DECIMAL}, #{pid,jdbcType=INTEGER}, #{clientid,jdbcType=INTEGER}, 
      #{userid,jdbcType=INTEGER}, #{refundid,jdbcType=INTEGER}, #{bookid,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.woniuxy.domain.Refundinfo">
    insert into refundinfo
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="refundinfoid != null">
        refundinfoid,
      </if>
      <if test="refundinfoprice != null">
        refundinfoprice,
      </if>
      <if test="refundinfocount != null">
        refundinfocount,
      </if>
      <if test="refundinmoney != null">
        refundinmoney,
      </if>
      <if test="pid != null">
        pid,
      </if>
      <if test="clientid != null">
        clientid,
      </if>
      <if test="userid != null">
        userid,
      </if>
      <if test="refundid != null">
        refundid,
      </if>
      <if test="bookid != null">
        bookid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="refundinfoid != null">
        #{refundinfoid,jdbcType=INTEGER},
      </if>
      <if test="refundinfoprice != null">
        #{refundinfoprice,jdbcType=DECIMAL},
      </if>
      <if test="refundinfocount != null">
        #{refundinfocount,jdbcType=INTEGER},
      </if>
      <if test="refundinmoney != null">
        #{refundinmoney,jdbcType=DECIMAL},
      </if>
      <if test="pid != null">
        #{pid,jdbcType=INTEGER},
      </if>
      <if test="clientid != null">
        #{clientid,jdbcType=INTEGER},
      </if>
      <if test="userid != null">
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="refundid != null">
        #{refundid,jdbcType=INTEGER},
      </if>
      <if test="bookid != null">
        #{bookid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.woniuxy.domain.RefundinfoExample" resultType="java.lang.Long">
    select count(*) from refundinfo
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update refundinfo
    <set>
      <if test="record.refundinfoid != null">
        refundinfoid = #{record.refundinfoid,jdbcType=INTEGER},
      </if>
      <if test="record.refundinfoprice != null">
        refundinfoprice = #{record.refundinfoprice,jdbcType=DECIMAL},
      </if>
      <if test="record.refundinfocount != null">
        refundinfocount = #{record.refundinfocount,jdbcType=INTEGER},
      </if>
      <if test="record.refundinmoney != null">
        refundinmoney = #{record.refundinmoney,jdbcType=DECIMAL},
      </if>
      <if test="record.pid != null">
        pid = #{record.pid,jdbcType=INTEGER},
      </if>
      <if test="record.clientid != null">
        clientid = #{record.clientid,jdbcType=INTEGER},
      </if>
      <if test="record.userid != null">
        userid = #{record.userid,jdbcType=INTEGER},
      </if>
      <if test="record.refundid != null">
        refundid = #{record.refundid,jdbcType=INTEGER},
      </if>
      <if test="record.bookid != null">
        bookid = #{record.bookid,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update refundinfo
    set refundinfoid = #{record.refundinfoid,jdbcType=INTEGER},
      refundinfoprice = #{record.refundinfoprice,jdbcType=DECIMAL},
      refundinfocount = #{record.refundinfocount,jdbcType=INTEGER},
      refundinmoney = #{record.refundinmoney,jdbcType=DECIMAL},
      pid = #{record.pid,jdbcType=INTEGER},
      clientid = #{record.clientid,jdbcType=INTEGER},
      userid = #{record.userid,jdbcType=INTEGER},
      refundid = #{record.refundid,jdbcType=INTEGER},
      bookid = #{record.bookid,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.woniuxy.domain.Refundinfo">
    update refundinfo
    <set>
      <if test="refundinfoprice != null">
        refundinfoprice = #{refundinfoprice,jdbcType=DECIMAL},
      </if>
      <if test="refundinfocount != null">
        refundinfocount = #{refundinfocount,jdbcType=INTEGER},
      </if>
      <if test="refundinmoney != null">
        refundinmoney = #{refundinmoney,jdbcType=DECIMAL},
      </if>
      <if test="pid != null">
        pid = #{pid,jdbcType=INTEGER},
      </if>
      <if test="clientid != null">
        clientid = #{clientid,jdbcType=INTEGER},
      </if>
      <if test="userid != null">
        userid = #{userid,jdbcType=INTEGER},
      </if>
      <if test="refundid != null">
        refundid = #{refundid,jdbcType=INTEGER},
      </if>
      <if test="bookid != null">
        bookid = #{bookid,jdbcType=INTEGER},
      </if>
    </set>
    where refundinfoid = #{refundinfoid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.woniuxy.domain.Refundinfo">
    update refundinfo
    set refundinfoprice = #{refundinfoprice,jdbcType=DECIMAL},
      refundinfocount = #{refundinfocount,jdbcType=INTEGER},
      refundinmoney = #{refundinmoney,jdbcType=DECIMAL},
      pid = #{pid,jdbcType=INTEGER},
      clientid = #{clientid,jdbcType=INTEGER},
      userid = #{userid,jdbcType=INTEGER},
      refundid = #{refundid,jdbcType=INTEGER},
      bookid = #{bookid,jdbcType=INTEGER}
    where refundinfoid = #{refundinfoid,jdbcType=INTEGER}
  </update>
</mapper>